{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","state","isLit","flipCellsAroundMe","handleClick","evt","props","classes","this","className","onClick","Component","Board","hasWon","board","createBoard","y","nrows","row","x","ncols","push","Math","random","changeLightStartsOn","coord","split","map","Number","flipCell","every","cell","setState","tblBoard","key","flipCellsAround","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yTA+BeA,G,iNAzBbC,MAAQ,CAACC,OAAQ,G,EAGjBC,kBAAoB,a,EAIpBD,MAAQ,a,EAGRE,YAAc,SAACC,GAEb,EAAKC,MAAMH,qB,wEAIX,IAAII,EAAU,QAAUC,KAAKF,MAAMJ,MAAQ,YAAc,IAEzD,OACI,wBAAIO,UAAWF,EAASG,QAASF,KAAKJ,kB,GApB3BO,cCDbC,G,kBAOJ,WAAYN,GAAQ,IAAD,8BACjB,4CAAMA,KACDL,MAAQ,CACXY,QAAQ,EACRC,MAAO,EAAKC,eAJG,E,2EAWjB,IADA,IAAID,EAAQ,GACJE,EAAE,EAAGA,EAAIR,KAAKF,MAAMW,MAAOD,IAAI,CAErC,IADA,IAAIE,EAAM,GACFC,EAAI,EAAGA,EAAIX,KAAKF,MAAMc,MAAOD,IACnCD,EAAIG,KAAKC,KAAKC,SAAWf,KAAKF,MAAMkB,qBAEtCV,EAAMO,KAAKH,GAEb,OAAOJ,I,sCAKOW,GAAQ,IAAD,EACAjB,KAAKF,MAArBc,EADgB,EAChBA,MAAOH,EADS,EACTA,MACRH,EAAQN,KAAKP,MAAMa,MAFF,EAGRW,EAAMC,MAAM,KAAKC,IAAIC,QAHb,oBAMrB,SAAkBZ,EAAGG,GACfA,GAAK,GAAKA,EAAIC,GAASJ,GAAK,GAAKA,EAAIC,IACvCH,EAAME,GAAGG,IAAML,EAAME,GAAGG,IAI5BU,CAZqB,WAkBrB,IAAIhB,EAASC,EAAMgB,OAAM,SAAAZ,GAAG,OAAIA,EAAIY,OAAM,SAAAC,GAAI,OAAa,IAATA,QAElDvB,KAAKwB,SAAS,CAAClB,QAAOD,a,oEAOd,IAAD,OACP,GAAGL,KAAKP,MAAMY,OACZ,OACI,yBAAKJ,UAAU,eACb,0BAAMA,UAAU,SAAhB,QACA,0BAAMA,UAAU,SAAhB,SAOR,IADA,IAAIwB,EAAW,GACPjB,EAAI,EAAGA,EAAIR,KAAKF,MAAMW,MAAOD,IAAK,CAExC,IADA,IAAIE,EAAM,GAD8B,WAEhCC,GACN,IAAIM,EAAK,UAAMT,EAAN,YAAWG,GACpBD,EAAIG,KAAK,kBAAC,EAAD,CAAMa,IAAKT,EAAOvB,MAAO,EAAKD,MAAMa,MAAME,GAAGG,GAAIhB,kBAAmB,kBAAM,EAAKgC,gBAAgBV,QAFlGN,EAAI,EAAGA,EAAIX,KAAKF,MAAMc,MAAOD,IAAM,EAAnCA,GAIRc,EAASZ,KAAK,4BAAKH,IAGrB,OACE,yBAAKT,UAAU,cACb,yBAAKA,UAAU,SACb,wBAAIA,UAAU,SAAd,UACA,wBAAIA,UAAU,SAAd,QAEF,2BAAOA,UAAU,SACf,+BACCwB,S,GAtFStB,cAAdC,EACGwB,aAAe,CACpBnB,MAAO,EACPG,MAAO,EACPI,oBAAqB,IA2FVZ,QCnFAyB,G,uLARX,OACE,yBAAK5B,UAAU,OACb,kBAAC,EAAD,W,GAJUE,cCME2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c6de51e9.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport \"./Cell.css\"\r\n\r\n/** A single cell on the board */\r\n\r\nclass Cell extends Component {\r\n  state = {isLit : false};\r\n\r\n    /** - flipCellsAroundMe: a function rec'd from the board which flips this cell and the cells around of it */\r\n  flipCellsAroundMe = () => {\r\n\r\n  };\r\n  /** - isLit: boolean, is this cell lit? */\r\n  isLit = () => {\r\n\r\n  };\r\n  handleClick = (evt) =>{\r\n    // call up to the board to flip cells around this cell\r\n    this.props.flipCellsAroundMe();\r\n  };\r\n\r\n  render() {\r\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\r\n\r\n    return (\r\n        <td className={classes} onClick={this.handleClick} />\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default Cell","import React, {Component} from \"react\";\r\nimport Cell from \"./Cell\";\r\nimport './Board.css';\r\n\r\nclass Board extends Component {\r\n  static defaultProps = {\r\n    nrows: 5,\r\n    ncols: 5,\r\n    changeLightStartsOn: 0.2\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasWon: false,\r\n      board: this.createBoard()\r\n    };\r\n  }\r\n\r\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\r\n  createBoard()  {\r\n    let board = [];\r\n    for(let y=0; y < this.props.nrows; y++){\r\n      let row = [];\r\n      for(let x = 0; x < this.props.ncols; x++){\r\n        row.push(Math.random() < this.props.changeLightStartsOn)\r\n      }\r\n      board.push(row)\r\n    }\r\n    return board\r\n  };\r\n\r\n  /** handle changing a cell: update board & determine if winner */\r\n\r\n  flipCellsAround(coord) {\r\n    let {ncols, nrows} = this.props;\r\n    let board = this.state.board;\r\n    let [y, x] = coord.split(\"-\").map(Number);\r\n\r\n    //Checking if this coord is actually on board and flip it\r\n    function flipCell(y, x) {\r\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\r\n        board[y][x] = !board[y][x];\r\n      }\r\n    }\r\n\r\n    flipCell(y,x);        //flip initial cell\r\n    // flipCell(y, x-1);  //flip left\r\n    // flipCell(y, x+1);  //flip right\r\n    // flipCell(y-1, x);  //flip below\r\n    // flipCell(y+1, x);  //flip above\r\n\r\n    let hasWon = board.every(row => row.every(cell => cell === false));\r\n\r\n    this.setState({board, hasWon});\r\n  }\r\n  Playagain(){\r\n\r\n  }\r\n\r\n  /** Render game board or winning message. */\r\n  render() {\r\n    if(this.state.hasWon) {\r\n      return (\r\n          <div className=\"win-message\">\r\n            <span className=\"Neon1\">You </span>\r\n            <span className=\"Neon2\">Win!</span>\r\n          </div>\r\n      )\r\n\r\n  }\r\n\r\n    let tblBoard = [];\r\n    for(let y = 0; y < this.props.nrows; y ++){\r\n      let row = [];\r\n      for(let x = 0; x < this.props.ncols; x++) {\r\n        let coord = `${y}-${x}`;\r\n        row.push(<Cell key={coord} isLit={this.state.board[y][x]} flipCellsAroundMe={() => this.flipCellsAround(coord)}/>)\r\n      }\r\n      tblBoard.push(<tr>{row}</tr>)\r\n    }\r\n\r\n    return (\r\n      <div className=\"Lights-Out\">\r\n        <div className=\"title\">\r\n          <h1 className=\"Neon1\">Lights</h1>\r\n          <h1 className=\"Neon2\">Out</h1>\r\n        </div>\r\n        <table className=\"Board\">\r\n          <tbody>\r\n          {tblBoard}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default Board;\r\n","import React, { Component } from \"react\";\r\nimport Board from \"./Board\";\r\nimport \"./App.css\";\r\n\r\n/** Simple app that just shows the LightsOut game. */\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className='App'>\r\n        <Board />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}