{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","state","isLit","flipCellsAroundMe","handleClick","evt","props","classes","this","className","onClick","Component","Board","hasWon","board","createBoard","y","nrows","row","x","ncols","push","Math","random","changeLightStartsOn","coord","split","map","Number","flipCell","setState","tblBoard","key","flipCellsAround","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yTA+BeA,G,iNAzBbC,MAAQ,CAACC,OAAQ,G,EAGjBC,kBAAoB,a,EAIpBD,MAAQ,a,EAGRE,YAAc,SAACC,GAEb,EAAKC,MAAMH,qB,wEAIX,IAAII,EAAU,QAAUC,KAAKF,MAAMJ,MAAQ,YAAc,IAEzD,OACI,wBAAIO,UAAWF,EAASG,QAASF,KAAKJ,kB,GApB3BO,cCDbC,G,kBAOJ,WAAYN,GAAQ,IAAD,8BACjB,4CAAMA,KACDL,MAAQ,CACXY,QAAQ,EACRC,MAAO,EAAKC,eAJG,E,2EAWjB,IADA,IAAID,EAAQ,GACJE,EAAE,EAAGA,EAAIR,KAAKF,MAAMW,MAAOD,IAAI,CAErC,IADA,IAAIE,EAAM,GACFC,EAAI,EAAGA,EAAIX,KAAKF,MAAMc,MAAOD,IACnCD,EAAIG,KAAKC,KAAKC,SAAWf,KAAKF,MAAMkB,qBAEtCV,EAAMO,KAAKH,GAEb,OAAOJ,I,sCAKOW,GAAQ,IAAD,EACAjB,KAAKF,MAArBc,EADgB,EAChBA,MAAOH,EADS,EACTA,MACRH,EAAQN,KAAKP,MAAMa,MAFF,EAGRW,EAAMC,MAAM,KAAKC,IAAIC,QAHb,mBAGhBZ,EAHgB,KAGbG,EAHa,KAMrB,SAASU,EAASb,EAAGG,GACfA,GAAK,GAAKA,EAAIC,GAASJ,GAAK,GAAKA,EAAIC,IACvCH,EAAME,GAAGG,IAAML,EAAME,GAAGG,IAI5BU,EAASb,EAAEG,GACXU,EAASb,EAAGG,EAAE,GACdU,EAASb,EAAGG,EAAE,GACdU,EAASb,EAAE,EAAGG,GACdU,EAASb,EAAE,EAAGG,GAGdX,KAAKsB,SAAS,CAAChB,QAAOD,QADT,M,+BASb,IAHQ,IAAD,OAEHkB,EAAW,GACPf,EAAI,EAAGA,EAAIR,KAAKF,MAAMW,MAAOD,IAAK,CAExC,IADA,IAAIE,EAAM,GAD8B,WAEhCC,GACN,IAAIM,EAAK,UAAMT,EAAN,YAAWG,GACpBD,EAAIG,KAAK,kBAAC,EAAD,CAAMW,IAAKP,EAAOvB,MAAO,EAAKD,MAAMa,MAAME,GAAGG,GAAIhB,kBAAmB,kBAAM,EAAK8B,gBAAgBR,QAFlGN,EAAI,EAAGA,EAAIX,KAAKF,MAAMc,MAAOD,IAAM,EAAnCA,GAIRY,EAASV,KAAK,4BAAKH,IAGrB,OACI,2BAAOT,UAAU,SACf,+BACGsB,Q,GArEOpB,cAAdC,EACGsB,aAAe,CACpBjB,MAAO,EACPG,MAAO,EACPI,oBAAqB,IAyEVZ,QCjEAuB,G,uLARX,OACE,yBAAK1B,UAAU,OACb,kBAAC,EAAD,W,GAJUE,cCMEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e853d572.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport \"./Cell.css\"\n\n/** A single cell on the board */\n\nclass Cell extends Component {\n  state = {isLit : false};\n\n    /** - flipCellsAroundMe: a function rec'd from the board which flips this cell and the cells around of it */\n  flipCellsAroundMe = () => {\n\n  };\n  /** - isLit: boolean, is this cell lit? */\n  isLit = () => {\n\n  };\n  handleClick = (evt) =>{\n    // call up to the board to flip cells around this cell\n    this.props.flipCellsAroundMe();\n  };\n\n  render() {\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\n\n    return (\n        <td className={classes} onClick={this.handleClick} />\n    )\n  }\n}\n\n\nexport default Cell","import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    changeLightStartsOn: 0.2\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasWon: false,\n      board: this.createBoard()\n    };\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  createBoard()  {\n    let board = [];\n    for(let y=0; y < this.props.nrows; y++){\n      let row = [];\n      for(let x = 0; x < this.props.ncols; x++){\n        row.push(Math.random() < this.props.changeLightStartsOn)\n      }\n      board.push(row)\n    }\n    return board\n  };\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n    //Checking if this coord is actually on board and flip it\n    function flipCell(y, x) {\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    flipCell(y,x);        //flip initial cell\n    flipCell(y, x-1);  //flip left\n    flipCell(y, x+1);  //flip right\n    flipCell(y-1, x);  //flip below\n    flipCell(y+1, x);  //flip above\n\n    let hasWon = false;\n    this.setState({board, hasWon});\n  }\n\n\n  /** Render game board or winning message. */\n  render() {\n\n    let tblBoard = [];\n    for(let y = 0; y < this.props.nrows; y ++){\n      let row = [];\n      for(let x = 0; x < this.props.ncols; x++) {\n        let coord = `${y}-${x}`;\n        row.push(<Cell key={coord} isLit={this.state.board[y][x]} flipCellsAroundMe={() => this.flipCellsAround(coord)}/>)\n      }\n      tblBoard.push(<tr>{row}</tr>)\n    }\n\n    return (\n        <table className=\"Board\">\n          <tbody>\n            {tblBoard}\n          </tbody>\n        </table>\n    )\n  }\n}\n\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}